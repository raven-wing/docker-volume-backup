#!/bin/bash
prompt()
{
    echo ""
    echo "Usage: dockup STACK_NAME [BACKUP_DIR] [-m MACHINE_NAME]"
    echo ""
    echo "dockup is script which purpose is to backup docker swarm volumes"
    echo "This script takes up to 2 arguments:"
    printf "\tSTACK_NAME - name of docker swarm stack - all volumes from this stack will be taken and put into BACKUP_DIR\n"
    printf "\tBACKUP_DIR - absolute path to directory where backups should be stored\n"
    printf "\t-m MACHINE_NAME - will take it from docker-machine\n"
    printf "\nbackup file format is \$\(STACK_NAME\)_backup.tar\n"
}


tar_volume()
{
    local CONTAINER_ID=$1
    local DIR_TO_BACKUP=$2
    local BACKUP_NAME=$3
    docker run --rm --volumes-from ${CONTAINER_ID} -v ${BACKUP_DIR}:/backup:rw ubuntu tar cf /backup/${BACKUP_NAME}_backup.tar -C ${DIR_TO_BACKUP}
}

backup_volume()
{
    local DIR_TO_BACKUP=$1
    local VOLUME_ID=$2

    local CONTAINER_ID=$(get_container_id_from_task_id ${TASK_ID})
    tar_volume $CONTAINER_ID $DIR_TO_BACKUP $VOLUME_NAME
}

backup_tasks_volumes()
{
    local TASK_ID=$1
    echo "TASK_ID: ${TASK_ID}"
    local DIR_VOLUMES=$(get_volumes_from_task ${TASK_ID})
    for (( i=0; i<${#DIR_VOLUMES[@]} ; i+=2 )); do
        backup_volume "${DIR_VOLUMES[i]}" "${DIR_VOLUMES[i+1]}"
    done
}

backup()
{
    local STACK_NAME=$1
    for TASK_ID in $(get_tasks_from_stack ${STACK_NAME} ) ; do
        backup_tasks_volumes $TASK_ID
    done
}

backup_docker_machine_volumes()
{
    local MACHINE_NAME=$1
    local STACK_NAME=$2
    eval $(docker-machine env $MACHINE_NAME)
    backup ${STACK_NAME}
    mkdir -p $BACKUP_DIR
    docker-machine scp "${MACHINE_NAME}:${BACKUP_DIR}/*" $BACKUP_DIR/
}

untar_volume()
{
    local CONTAINER_ID=$1
    local DIR_TO_BACKUP=$2
    local BACKUP_NAME=$3
    echo "dupa"
    echo $CONTAINER_ID
    echo $DIR_TO_BACKUP
    echo $BACKUP_NAME
#    docker run --rm --volumes-from ${CONTAINER_ID} -v ${BACKUP_DIR}:/backup:rw ubuntu tar -xf /backup/${BACKUP_NAME}_backup.tar  --transform='s,${DIR_TO_BACKUP},,g' -C ${DIR_TO_BACKUP}
#    docker run --rm --volumes-from ${CONTAINER_ID} -v ${BACKUP_DIR}:/backup:rw ubuntu find ${DIR_TO_BACKUP}
   
}

restore_volume()
{
    local DIR_TO_BACKUP=$1
    local VOLUME_ID=$2
    local CONTAINER_ID=$(get_container_id_from_task_id ${TASK_ID})
    untar_volume $CONTAINER_ID $DIR_TO_BACKUP $VOLUME_NAME
}

restore_tasks_volumes()
{
    set -x
    local TASK_ID=$1
    echo "TASK_ID: ${TASK_ID}"
    local DIR_VOLUMES=$(get_volumes_from_task ${TASK_ID})
    for (( i=0; i<${#DIR_VOLUMES[@]} ; i+=2 )); do
        restore_volume "${DIR_VOLUMES[i]}" "${DIR_VOLUMES[i+1]}"
    done
    set +x
}

restore()
{
    local STACK_NAME=$1
    for TASK_ID in $(get_tasks_from_stack ${STACK_NAME} ) ; do
        restore_tasks_volumes $TASK_ID
    done
}

restore_docker_machine_volumes()
{
    local MACHINE_NAME=$1
    local STACK_NAME=$2
    eval $(docker-machine env $MACHINE_NAME)
    docker-machine scp -r $BACKUP_DIR/. "${MACHINE_NAME}:/tmp/backup_dir"
    docker-machine ssh "${MACHINE_NAME}" sudo mv "/tmp/backup_dir/*" "${BACKUP_DIR}"
    restore ${STACK_NAME}
}

get_volumes_from_task()
{
    docker inspect $1 -f '{{range .Spec.ContainerSpec.Mounts}}{{println .Target .Source}}{{end}}'
}

get_tasks_from_stack()
{
    local STACK_NAME=$1
    docker stack ps $STACK_NAME --no-trunc --filter "desired-state=Running" -q || exit -1
}

get_container_id_from_task_id()
{
    local TASK_ID=$1
    docker inspect -f "{{.Status.ContainerStatus.ContainerID}}" $TASK_ID || exit -1
}

main()
{
    local BASE_COMMAND="backup"
    local POSITIONAL=()
    while [[ $# -gt 0 ]]
    do
        key="$1"

        case $key in
            -m|--machine)
                local MACHINE_NAME="$2"
                shift # past argument
                shift # past value
                COMMAND_POSTFIX="docker_machine_volumes ${MACHINE_NAME}"
                ;;
            -h|--help)
                prompt
                exit 0
                ;;
            -r|--restore)
                BASE_COMMAND="restore"
		shift
                ;;
            *)    # unknown option
                POSITIONAL+=("$1") # save it in an array for later
                shift # past argument
                ;;
        esac
    done
    set -- "${POSITIONAL[@]}" # restore positional parameters
    # check whether at least one argument is there
    [[ $# -lt 1 ]] && echo "stack name was not provided" && prompt && exit -1
    local STACK_NAME=$1
    local BACKUP_DIR=${2:-${HOME}/backup}

    COMMAND="${BASE_COMMAND}_${COMMAND_POSTFIX}"
    $COMMAND ${STACK_NAME} ${BACKUP_DIR}
}

main $@
